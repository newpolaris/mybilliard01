//----------------------------------------------
// MyCameraMoveViewRotateSMC_AutoGenerated.cpp
// FSM:       MyCameraMoveViewRotateSMC_AutoGenerated
// Context:   MyCameraMoveViewRotateSMC
// Version:   
// Generated: Sunday 08/30/2009 at 02:29:40 EDT
//


static char _versID[]  = "";

#include "MyCameraMoveViewRotateSMC_AutoGenerated.h"

namespace smc
{

//----------------------------------------------
// Definitions of static state objects

//----------------------------------------------
MyCameraMoveViewRotateSMC_AutoGeneratedPitchUpState MyCameraMoveViewRotateSMC_AutoGenerated::PitchUp;
MyCameraMoveViewRotateSMC_AutoGeneratedRotateCounterClockWiseByZState MyCameraMoveViewRotateSMC_AutoGenerated::RotateCounterClockWiseByZ;
MyCameraMoveViewRotateSMC_AutoGeneratedRotateClockWiseByZState MyCameraMoveViewRotateSMC_AutoGenerated::RotateClockWiseByZ;
MyCameraMoveViewRotateSMC_AutoGeneratedRotateCounterClockWiseByZ_PitchDownState MyCameraMoveViewRotateSMC_AutoGenerated::RotateCounterClockWiseByZ_PitchDown;
MyCameraMoveViewRotateSMC_AutoGeneratedRotateClockWiseByZ_PitchDownState MyCameraMoveViewRotateSMC_AutoGenerated::RotateClockWiseByZ_PitchDown;
MyCameraMoveViewRotateSMC_AutoGeneratedRotateStopState MyCameraMoveViewRotateSMC_AutoGenerated::RotateStop;
MyCameraMoveViewRotateSMC_AutoGeneratedRotateCounterClockWiseByZ_PitchUpState MyCameraMoveViewRotateSMC_AutoGenerated::RotateCounterClockWiseByZ_PitchUp;
MyCameraMoveViewRotateSMC_AutoGeneratedRotateClockWiseByZ_PitchUpState MyCameraMoveViewRotateSMC_AutoGenerated::RotateClockWiseByZ_PitchUp;
MyCameraMoveViewRotateSMC_AutoGeneratedPitchDownState MyCameraMoveViewRotateSMC_AutoGenerated::PitchDown;

//----------------------------------------------
// Default Event Functions

//----------------------------------------------

void MyCameraMoveViewRotateSMC_AutoGeneratedState::endPitchDown(MyCameraMoveViewRotateSMC_AutoGenerated& s)
  { s.FSMError("endPitchDown", s.GetState().StateName()); }

void MyCameraMoveViewRotateSMC_AutoGeneratedState::beginRotateCounterClockWiseByZ(MyCameraMoveViewRotateSMC_AutoGenerated& s)
  { s.FSMError("beginRotateCounterClockWiseByZ", s.GetState().StateName()); }

void MyCameraMoveViewRotateSMC_AutoGeneratedState::endRotateClockWiseByZ(MyCameraMoveViewRotateSMC_AutoGenerated& s)
  { s.FSMError("endRotateClockWiseByZ", s.GetState().StateName()); }

void MyCameraMoveViewRotateSMC_AutoGeneratedState::beginPitchDown(MyCameraMoveViewRotateSMC_AutoGenerated& s)
  { s.FSMError("beginPitchDown", s.GetState().StateName()); }

void MyCameraMoveViewRotateSMC_AutoGeneratedState::endPitchUp(MyCameraMoveViewRotateSMC_AutoGenerated& s)
  { s.FSMError("endPitchUp", s.GetState().StateName()); }

void MyCameraMoveViewRotateSMC_AutoGeneratedState::endRotateCounterClockWiseByZ(MyCameraMoveViewRotateSMC_AutoGenerated& s)
  { s.FSMError("endRotateCounterClockWiseByZ", s.GetState().StateName()); }

void MyCameraMoveViewRotateSMC_AutoGeneratedState::beginRotateClockWiseByZ(MyCameraMoveViewRotateSMC_AutoGenerated& s)
  { s.FSMError("beginRotateClockWiseByZ", s.GetState().StateName()); }

void MyCameraMoveViewRotateSMC_AutoGeneratedState::beginPitchUp(MyCameraMoveViewRotateSMC_AutoGenerated& s)
  { s.FSMError("beginPitchUp", s.GetState().StateName()); }

//----------------------------------------------
// The States and their Transitions
//----------------------------------------------

//----------------------------------------------
// PitchUp Actions and Transitions
//----------------------------------------------

// Starting State: PitchUp
// Event:          beginRotateCounterClockWiseByZ
//
void MyCameraMoveViewRotateSMC_AutoGeneratedPitchUpState::beginRotateCounterClockWiseByZ( MyCameraMoveViewRotateSMC_AutoGenerated& s )
{

    s.beginRotateCounterClockWiseByZ_();

    // Change the state
    s.SetState(MyCameraMoveViewRotateSMC_AutoGenerated::RotateCounterClockWiseByZ_PitchUp);
}

// Starting State: PitchUp
// Event:          beginRotateClockWiseByZ
//
void MyCameraMoveViewRotateSMC_AutoGeneratedPitchUpState::beginRotateClockWiseByZ( MyCameraMoveViewRotateSMC_AutoGenerated& s )
{

    s.beginRotateClockWiseByZ_();

    // Change the state
    s.SetState(MyCameraMoveViewRotateSMC_AutoGenerated::RotateClockWiseByZ_PitchUp);
}

// Starting State: PitchUp
// Event:          endPitchUp
//
void MyCameraMoveViewRotateSMC_AutoGeneratedPitchUpState::endPitchUp( MyCameraMoveViewRotateSMC_AutoGenerated& s )
{

    s.endPitchUp_();

    // Change the state
    s.SetState(MyCameraMoveViewRotateSMC_AutoGenerated::RotateStop);

    // Entry functions for: RotateStop
    s.entryRotateStop_();
}

//----------------------------------------------
// RotateCounterClockWiseByZ Actions and Transitions
//----------------------------------------------

// Starting State: RotateCounterClockWiseByZ
// Event:          beginPitchDown
//
void MyCameraMoveViewRotateSMC_AutoGeneratedRotateCounterClockWiseByZState::beginPitchDown( MyCameraMoveViewRotateSMC_AutoGenerated& s )
{

    s.beginPitchDown_();

    // Change the state
    s.SetState(MyCameraMoveViewRotateSMC_AutoGenerated::RotateCounterClockWiseByZ_PitchDown);
}

// Starting State: RotateCounterClockWiseByZ
// Event:          beginPitchUp
//
void MyCameraMoveViewRotateSMC_AutoGeneratedRotateCounterClockWiseByZState::beginPitchUp( MyCameraMoveViewRotateSMC_AutoGenerated& s )
{

    s.beginPitchUp_();

    // Change the state
    s.SetState(MyCameraMoveViewRotateSMC_AutoGenerated::RotateCounterClockWiseByZ_PitchUp);
}

// Starting State: RotateCounterClockWiseByZ
// Event:          endRotateCounterClockWiseByZ
//
void MyCameraMoveViewRotateSMC_AutoGeneratedRotateCounterClockWiseByZState::endRotateCounterClockWiseByZ( MyCameraMoveViewRotateSMC_AutoGenerated& s )
{

    s.endRotateCounterClockWiseByZ_();

    // Change the state
    s.SetState(MyCameraMoveViewRotateSMC_AutoGenerated::RotateStop);

    // Entry functions for: RotateStop
    s.entryRotateStop_();
}

//----------------------------------------------
// RotateClockWiseByZ Actions and Transitions
//----------------------------------------------

// Starting State: RotateClockWiseByZ
// Event:          endRotateClockWiseByZ
//
void MyCameraMoveViewRotateSMC_AutoGeneratedRotateClockWiseByZState::endRotateClockWiseByZ( MyCameraMoveViewRotateSMC_AutoGenerated& s )
{

    s.endRotateClockWiseByZ_();

    // Change the state
    s.SetState(MyCameraMoveViewRotateSMC_AutoGenerated::RotateStop);

    // Entry functions for: RotateStop
    s.entryRotateStop_();
}

// Starting State: RotateClockWiseByZ
// Event:          beginPitchUp
//
void MyCameraMoveViewRotateSMC_AutoGeneratedRotateClockWiseByZState::beginPitchUp( MyCameraMoveViewRotateSMC_AutoGenerated& s )
{

    s.beginPitchUp_();

    // Change the state
    s.SetState(MyCameraMoveViewRotateSMC_AutoGenerated::RotateClockWiseByZ_PitchUp);
}

// Starting State: RotateClockWiseByZ
// Event:          beginPitchDown
//
void MyCameraMoveViewRotateSMC_AutoGeneratedRotateClockWiseByZState::beginPitchDown( MyCameraMoveViewRotateSMC_AutoGenerated& s )
{

    s.beginPitchDown_();

    // Change the state
    s.SetState(MyCameraMoveViewRotateSMC_AutoGenerated::RotateClockWiseByZ_PitchDown);
}

//----------------------------------------------
// RotateCounterClockWiseByZ_PitchDown Actions and Transitions
//----------------------------------------------

// Starting State: RotateCounterClockWiseByZ_PitchDown
// Event:          endRotateCounterClockWiseByZ
//
void MyCameraMoveViewRotateSMC_AutoGeneratedRotateCounterClockWiseByZ_PitchDownState::endRotateCounterClockWiseByZ( MyCameraMoveViewRotateSMC_AutoGenerated& s )
{

    s.endRotateCounterClockWiseByZ_();

    // Change the state
    s.SetState(MyCameraMoveViewRotateSMC_AutoGenerated::PitchDown);
}

// Starting State: RotateCounterClockWiseByZ_PitchDown
// Event:          endPitchDown
//
void MyCameraMoveViewRotateSMC_AutoGeneratedRotateCounterClockWiseByZ_PitchDownState::endPitchDown( MyCameraMoveViewRotateSMC_AutoGenerated& s )
{

    s.endPitchDown_();

    // Change the state
    s.SetState(MyCameraMoveViewRotateSMC_AutoGenerated::RotateCounterClockWiseByZ);
}

//----------------------------------------------
// RotateClockWiseByZ_PitchDown Actions and Transitions
//----------------------------------------------

// Starting State: RotateClockWiseByZ_PitchDown
// Event:          endRotateClockWiseByZ
//
void MyCameraMoveViewRotateSMC_AutoGeneratedRotateClockWiseByZ_PitchDownState::endRotateClockWiseByZ( MyCameraMoveViewRotateSMC_AutoGenerated& s )
{

    s.endRotateClockWiseByZ_();

    // Change the state
    s.SetState(MyCameraMoveViewRotateSMC_AutoGenerated::PitchDown);
}

// Starting State: RotateClockWiseByZ_PitchDown
// Event:          endPitchDown
//
void MyCameraMoveViewRotateSMC_AutoGeneratedRotateClockWiseByZ_PitchDownState::endPitchDown( MyCameraMoveViewRotateSMC_AutoGenerated& s )
{

    s.endPitchDown_();

    // Change the state
    s.SetState(MyCameraMoveViewRotateSMC_AutoGenerated::RotateClockWiseByZ);
}

//----------------------------------------------
// RotateStop Actions and Transitions
//----------------------------------------------

// Starting State: RotateStop
// Event:          beginRotateCounterClockWiseByZ
//
void MyCameraMoveViewRotateSMC_AutoGeneratedRotateStopState::beginRotateCounterClockWiseByZ( MyCameraMoveViewRotateSMC_AutoGenerated& s )
{

    s.beginRotateCounterClockWiseByZ_();

    // Change the state
    s.SetState(MyCameraMoveViewRotateSMC_AutoGenerated::RotateCounterClockWiseByZ);
}

// Starting State: RotateStop
// Event:          beginPitchDown
//
void MyCameraMoveViewRotateSMC_AutoGeneratedRotateStopState::beginPitchDown( MyCameraMoveViewRotateSMC_AutoGenerated& s )
{

    s.beginPitchDown_();

    // Change the state
    s.SetState(MyCameraMoveViewRotateSMC_AutoGenerated::PitchDown);
}

// Starting State: RotateStop
// Event:          beginPitchUp
//
void MyCameraMoveViewRotateSMC_AutoGeneratedRotateStopState::beginPitchUp( MyCameraMoveViewRotateSMC_AutoGenerated& s )
{

    s.beginPitchUp_();

    // Change the state
    s.SetState(MyCameraMoveViewRotateSMC_AutoGenerated::PitchUp);
}

// Starting State: RotateStop
// Event:          beginRotateClockWiseByZ
//
void MyCameraMoveViewRotateSMC_AutoGeneratedRotateStopState::beginRotateClockWiseByZ( MyCameraMoveViewRotateSMC_AutoGenerated& s )
{

    s.beginRotateClockWiseByZ_();

    // Change the state
    s.SetState(MyCameraMoveViewRotateSMC_AutoGenerated::RotateClockWiseByZ);
}

//----------------------------------------------
// RotateCounterClockWiseByZ_PitchUp Actions and Transitions
//----------------------------------------------

// Starting State: RotateCounterClockWiseByZ_PitchUp
// Event:          endRotateCounterClockWiseByZ
//
void MyCameraMoveViewRotateSMC_AutoGeneratedRotateCounterClockWiseByZ_PitchUpState::endRotateCounterClockWiseByZ( MyCameraMoveViewRotateSMC_AutoGenerated& s )
{

    s.endRotateCounterClockWiseByZ_();

    // Change the state
    s.SetState(MyCameraMoveViewRotateSMC_AutoGenerated::PitchUp);
}

// Starting State: RotateCounterClockWiseByZ_PitchUp
// Event:          endPitchUp
//
void MyCameraMoveViewRotateSMC_AutoGeneratedRotateCounterClockWiseByZ_PitchUpState::endPitchUp( MyCameraMoveViewRotateSMC_AutoGenerated& s )
{

    s.endPitchUp_();

    // Change the state
    s.SetState(MyCameraMoveViewRotateSMC_AutoGenerated::RotateCounterClockWiseByZ);
}

//----------------------------------------------
// RotateClockWiseByZ_PitchUp Actions and Transitions
//----------------------------------------------

// Starting State: RotateClockWiseByZ_PitchUp
// Event:          endRotateClockWiseByZ
//
void MyCameraMoveViewRotateSMC_AutoGeneratedRotateClockWiseByZ_PitchUpState::endRotateClockWiseByZ( MyCameraMoveViewRotateSMC_AutoGenerated& s )
{

    s.endRotateClockWiseByZ_();

    // Change the state
    s.SetState(MyCameraMoveViewRotateSMC_AutoGenerated::PitchUp);
}

// Starting State: RotateClockWiseByZ_PitchUp
// Event:          endPitchUp
//
void MyCameraMoveViewRotateSMC_AutoGeneratedRotateClockWiseByZ_PitchUpState::endPitchUp( MyCameraMoveViewRotateSMC_AutoGenerated& s )
{

    s.endPitchUp_();

    // Change the state
    s.SetState(MyCameraMoveViewRotateSMC_AutoGenerated::RotateClockWiseByZ);
}

//----------------------------------------------
// PitchDown Actions and Transitions
//----------------------------------------------

// Starting State: PitchDown
// Event:          beginRotateClockWiseByZ
//
void MyCameraMoveViewRotateSMC_AutoGeneratedPitchDownState::beginRotateClockWiseByZ( MyCameraMoveViewRotateSMC_AutoGenerated& s )
{

    s.beginRotateClockWiseByZ_();

    // Change the state
    s.SetState(MyCameraMoveViewRotateSMC_AutoGenerated::RotateClockWiseByZ_PitchDown);
}

// Starting State: PitchDown
// Event:          endPitchDown
//
void MyCameraMoveViewRotateSMC_AutoGeneratedPitchDownState::endPitchDown( MyCameraMoveViewRotateSMC_AutoGenerated& s )
{

    s.endPitchDown_();

    // Change the state
    s.SetState(MyCameraMoveViewRotateSMC_AutoGenerated::RotateStop);

    // Entry functions for: RotateStop
    s.entryRotateStop_();
}

// Starting State: PitchDown
// Event:          beginRotateCounterClockWiseByZ
//
void MyCameraMoveViewRotateSMC_AutoGeneratedPitchDownState::beginRotateCounterClockWiseByZ( MyCameraMoveViewRotateSMC_AutoGenerated& s )
{

    s.beginRotateCounterClockWiseByZ_();

    // Change the state
    s.SetState(MyCameraMoveViewRotateSMC_AutoGenerated::RotateCounterClockWiseByZ_PitchDown);
}

//----------------------------------------------
// State Machine Constructor: MyCameraMoveViewRotateSMC_AutoGenerated
//  set Initial State to: RotateStop
//
//----------------------------------------------
MyCameraMoveViewRotateSMC_AutoGenerated::MyCameraMoveViewRotateSMC_AutoGenerated() : itsState(&RotateStop)
{
    // Entry functions for: RotateStop
    entryRotateStop_();
}

//  Get version information
//
const char* MyCameraMoveViewRotateSMC_AutoGenerated::GetVersion() const
{ return _versID; }

}  // end namespace smc

