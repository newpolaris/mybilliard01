#include "Stdafx.h"
#include "my_app.h"


MyCameraState::MyCameraState( MyCamera * camera, BilliardControl * billiardControl )
: billiardControl_( billiardControl )
{
    mode.setBilliardControl( billiardControl );
    aim.setBilliardControl( billiardControl );
}

bool MyCameraState::isMoveView() {
    return &(mode.GetState()) == &MyCameraSMC_AutoGenerated::MoveView;
}

bool MyCameraState::isCueRotateLeft() {
    return &(top.GetState()) == &MyCameraTopViewSMC_AutoGenerated::RotateLeft;
}
bool MyCameraState::isCueRotateRight() {
    return &(top.GetState()) == &MyCameraTopViewSMC_AutoGenerated::RotateRight;
}

bool MyCameraState::isAimView() {
    return &(mode.GetState()) == &MyCameraSMC_AutoGenerated::AimView;
}
bool MyCameraState::isTopView() {
    return &(mode.GetState()) == &MyCameraSMC_AutoGenerated::TopView;
}

bool MyCameraState::isAimLeft() {
    return &(aim.GetState()) == &MyCameraAimViewSMC_AutoGenerated::AimLeft;
}
bool MyCameraState::isAimRight() {
    return &(aim.GetState()) == &MyCameraAimViewSMC_AutoGenerated::AimRight;
}
bool MyCameraState::isShootingNow() {
    return &(aim.GetState()) == &MyCameraAimViewSMC_AutoGenerated::Shoot;
}
NxVec3 MyCameraState::getAimPoint() {
    return aim.getAimPoint();
}

bool MyCameraState::isMoveForward() {
    return &(move.GetState()) == &MyCameraMoveViewMoveSMC_AutoGenerated::MoveForward;
}
bool MyCameraState::isMoveBackwardLeft()  {
    return &(move.GetState()) == &MyCameraMoveViewMoveSMC_AutoGenerated::MoveBackwardLeft;
}
bool MyCameraState::isMoveLeft()  {
    return &(move.GetState()) == &MyCameraMoveViewMoveSMC_AutoGenerated::MoveLeft;
}
bool MyCameraState::isMoveBackward()  {
    return &(move.GetState()) == &MyCameraMoveViewMoveSMC_AutoGenerated::MoveBackward;
}
bool MyCameraState::isMoveRight()  {
    return &(move.GetState()) == &MyCameraMoveViewMoveSMC_AutoGenerated::MoveRight;
}
bool MyCameraState::isMoveForwardLeft()  {
    return &(move.GetState()) == &MyCameraMoveViewMoveSMC_AutoGenerated::MoveForwardLeft;
}
bool MyCameraState::isMoveForwardRight()  {
    return &(move.GetState()) == &MyCameraMoveViewMoveSMC_AutoGenerated::MoveForwardRight;
}
bool MyCameraState::isMoveStop()  {
    return &(move.GetState()) == &MyCameraMoveViewMoveSMC_AutoGenerated::MoveStop;
}
bool MyCameraState::isMoveBackwardRight()  {
    return &(move.GetState()) == &MyCameraMoveViewMoveSMC_AutoGenerated::MoveBackwardRight;
}

bool MyCameraState::isPitchUp() {
    return &(rotate.GetState()) == &MyCameraMoveViewRotateSMC_AutoGenerated::PitchUp;
}
bool MyCameraState::isRotateCounterClockWiseByZ() {
    return &(rotate.GetState()) == &MyCameraMoveViewRotateSMC_AutoGenerated::RotateCounterClockWiseByZ;
}
bool MyCameraState::isRotateClockWiseByZ() {
    return &(rotate.GetState()) == &MyCameraMoveViewRotateSMC_AutoGenerated::RotateClockWiseByZ;
}
bool MyCameraState::isRotateCounterClockWiseByZ_PitchDown() {
    return &(rotate.GetState()) == &MyCameraMoveViewRotateSMC_AutoGenerated::RotateCounterClockWiseByZ_PitchDown;
}
bool MyCameraState::isRotateClockWiseByZ_PitchDown() {
    return &(rotate.GetState()) == &MyCameraMoveViewRotateSMC_AutoGenerated::RotateClockWiseByZ_PitchDown;
}
bool MyCameraState::isRotateStop() {
    return &(rotate.GetState()) == &MyCameraMoveViewRotateSMC_AutoGenerated::RotateStop;
}
bool MyCameraState::isRotateCounterClockWiseByZ_PitchUp() {
    return &(rotate.GetState()) == &MyCameraMoveViewRotateSMC_AutoGenerated::RotateCounterClockWiseByZ_PitchUp;
}
bool MyCameraState::isRotateClockWiseByZ_PitchUp() {
    return &(rotate.GetState()) == &MyCameraMoveViewRotateSMC_AutoGenerated::RotateClockWiseByZ_PitchUp;
}
bool MyCameraState::isPitchDown() {
    return &(rotate.GetState()) == &MyCameraMoveViewRotateSMC_AutoGenerated::PitchDown;
}

bool MyCameraState::isBallMoving() {
    return billiardControl_->isBallMoving();
}

